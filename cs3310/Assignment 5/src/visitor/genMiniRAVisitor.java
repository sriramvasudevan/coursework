//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

import base.SymbolTable;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class genMiniRAVisitor<R> implements GJNoArguVisitor<R> {
    public SymbolTable symtab;
    boolean            label_print = true; // Flag to mark if a label is to be
                                           // printed
    int                stack_ptr   = 0;
    int                paramnos    = 0;
    String             currfunc    = null;

    // save caller regs
    void saveCallerRegs() {
        for (int i = 0; i < 10; i++) {
            System.out.println("\tASTORE SPILLEDARG " + stack_ptr + " t" + i);
            stack_ptr++;
        }
    }

    // save callee regs
    void saveCalleeRegs() {
        for (int i = 0; i < 8; i++) {
            System.out.println("\tASTORE SPILLEDARG " + stack_ptr + " s" + i);
            stack_ptr++;
        }
    }

    // restore caller regs
    void restoreCallerRegs() {
        for (int i = 9; i >= 0; i--) {
            stack_ptr--;
            System.out.println("\tALOAD t" + i + " SPILLEDARG " + stack_ptr);
        }
    }

    // restore callee regs
    void restoreCalleeRegs() {
        for (int i = 7; i >= 0; i--) {
            stack_ptr--;
            System.out.println("\tALOAD s" + i + " SPILLEDARG " + stack_ptr);
        }
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public R visit(NodeList n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if (n.present()) {
            R _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                label_print = true;
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n) {
        if (n.present())
            return n.node.accept(this);
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN" f1 -> StmtList() f2 -> "END" f3 -> ( Procedure() )* f4 ->
     * <EOF>
     */
    public R visit(Goal n) {
        R _ret = null;
        currfunc = "main";
        paramnos = 0;

        System.out.println("MAIN [0][" + 200 + "][" + 200 + "]"); // temp hack
        n.f1.accept(this);
        System.out.println("END");
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Label() f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> StmtExp()
     */
    public R visit(Procedure n) {
        R _ret = null;
        currfunc = n.f0.f0.toString();
        paramnos = Integer.parseInt(n.f2.f0.toString());
        stack_ptr += Math.max(0, paramnos - 4); // PASSARGS will be available as
                                                // the first few SPILLEDARGS
                                                // here

        label_print = false;
        System.out.println();
        System.out.println(n.f0.accept(this) + " [" + n.f2.accept(this) + "]["
                + 200 + "][" + 200 + "]"); // temp hack
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> NoOpStmt() | ErrorStmt() | CJumpStmt() | JumpStmt() | HStoreStmt()
     * | HLoadStmt() | MoveStmt() | PrintStmt()
     */
    public R visit(Stmt n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n) {
        R _ret = null;
        System.out.println("\tNOOP");
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n) {
        R _ret = null;
        System.out.println("\tERROR");
        return _ret;
    }

    /**
     * f0 -> "CJUMP" f1 -> Temp() f2 -> Label()
     */
    public R visit(CJumpStmt n) {
        R _ret = null;
        label_print = false;
        String argval = (String) n.f1.accept(this);
        String arg_reg = symtab.register.get(currfunc + argval);
        if (arg_reg == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + argval));
            arg_reg = "v1";
        }
        String alt_label = symtab.global_label
                .get(currfunc + n.f2.accept(this));
        System.out.println("\tCJUMP " + arg_reg + " " + alt_label);
        return _ret;
    }

    /**
     * f0 -> "JUMP" f1 -> Label()
     */
    public R visit(JumpStmt n) {
        R _ret = null;
        label_print = false;
        String alt_label = symtab.global_label
                .get(currfunc + n.f1.accept(this));
        System.out.println("\tJUMP " + alt_label);
        return _ret;
    }

    /**
     * f0 -> "HSTORE" f1 -> Temp() f2 -> IntegerLiteral() f3 -> Temp()
     */
    public R visit(HStoreStmt n) {
        R _ret = null;

        String tempval = (String) n.f1.accept(this);
        String temp_reg = symtab.register.get(currfunc + tempval);
        String argval = (String) n.f3.accept(this);
        String arg_reg = symtab.register.get(currfunc + argval);
        if (arg_reg == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + argval));
            arg_reg = "v1";
        }

        if (temp_reg == null) { // v0 not modified so no need of ASTORE here
            System.out.println("\tALOAD v0 SPILLEDARG "
                    + symtab.location.get(currfunc + tempval));
            System.out.println("\tHSTORE v0 " + n.f2.accept(this) + " "
                    + arg_reg);
        }
        else {
            System.out.println("\tHSTORE " + temp_reg + " " + n.f2.accept(this)
                    + " " + arg_reg);
        }

        return _ret;
    }

    /**
     * f0 -> "HLOAD" f1 -> Temp() f2 -> Temp() f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n) {
        R _ret = null;

        String tempval = (String) n.f1.accept(this);
        String temp_reg = symtab.register.get(currfunc + tempval);
        String argval = (String) n.f2.accept(this);
        String arg_reg = symtab.register.get(currfunc + argval);
        if (arg_reg == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + argval));
            arg_reg = "v1";
        }

        if (temp_reg == null) {
            System.out.println("\tHLOAD v1 " + arg_reg + " "
                    + n.f3.accept(this));
            System.out.println("\tASTORE SPILLEDARG "
                    + symtab.location.get(currfunc + tempval) + " v1");
        }
        else {
            System.out.println("\tHLOAD " + temp_reg + " " + arg_reg + " "
                    + n.f3.accept(this));
        }

        return _ret;
    }

    /**
     * f0 -> "MOVE" f1 -> Temp() f2 -> Exp()
     */
    public R visit(MoveStmt n) {
        R _ret = null;
        label_print = false;
        String tempval = (String) n.f1.accept(this);
        String temp_reg = symtab.register.get(currfunc + tempval);
        String expval = (String) n.f2.accept(this); // !SimExp=>v0, else
                                                    // temp, int or label
        String exp_reg = expval;
        if (n.f2.f0.which == 3) { // it's a SimExp
            if (((SimpleExp) n.f2.f0.choice).f0.which == 0) { // it's a temp
                exp_reg = symtab.register.get(currfunc + expval);
            }
            if (exp_reg == null) {
                System.out.println("\tALOAD v1 SPILLEDARG "
                        + symtab.location.get(currfunc + expval));
                exp_reg = "v1";
            }
        }

        if (temp_reg == null) {
            System.out.println("\tMOVE v1 " + exp_reg);
            System.out.println("\tASTORE SPILLEDARG "
                    + symtab.location.get(currfunc + tempval) + " v1");
        }
        else {
            System.out.println("\tMOVE " + temp_reg + " " + exp_reg);
        }

        return _ret;
    }

    /**
     * f0 -> "PRINT" f1 -> SimpleExp()
     */
    public R visit(PrintStmt n) {
        R _ret = null;

        String expval = (String) n.f1.accept(this); // temp or int literal
        String exp_reg = expval;
        if (n.f1.f0.which == 0) { // it's a temp
            exp_reg = symtab.register.get(currfunc + expval);
        }
        if (exp_reg == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + expval));
            exp_reg = "v1";
        }
        System.out.println("\tPRINT " + exp_reg);

        return _ret;
    }

    /**
     * f0 -> Call() | HAllocate() | BinOp() | SimpleExp()
     */
    public R visit(Exp n) {
        return n.f0.accept(this);
    }

    /**
     * f0 -> "BEGIN" f1 -> StmtList() f2 -> "RETURN" f3 -> SimpleExp() f4 ->
     * "END"
     */
    public R visit(StmtExp n) {
        R _ret = null;

        // save callee regs
        saveCalleeRegs();

        // set up param regs
        for (int i = 0; i < Math.min(4, paramnos); i++) {
            String arg_reg = symtab.register.get(currfunc + i);
            if (arg_reg == null) {
                Integer loc = symtab.location.get(currfunc + i);
                if (loc != null) {
                    System.out.println("\tASTORE SPILLEDARG "
                            + symtab.location.get(currfunc + i) + " a" + i);
                }
                // else - the temp was never seen in the body ie., it wasn't
                // used
                // Hence needn't be loaded
            }
            else {
                System.out.println("\tMOVE " + arg_reg + " a" + i);
            }
        }
        for (int i = 4; i < paramnos; i++) {
            String arg_reg = symtab.register.get(currfunc + i);
            if (arg_reg == null) {
                System.out.println("\tALOAD v1 SPILLEDARG " + (i - 4));
                System.out.println("\tASTORE SPILLEDARG "
                        + symtab.location.get(currfunc + i) + " v1");
            }
            else {
                System.out.println("\tALOAD " + arg_reg + " SPILLEDARG "
                        + (i - 4));
            }
        }

        // body
        n.f1.accept(this);

        // retval
        String retval = (String) n.f3.accept(this); // temp or int literal
        String ret_reg = retval;
        if (n.f3.f0.which == 0) { // it's a temp
            ret_reg = symtab.register.get(currfunc + ret_reg);
        }
        if (ret_reg == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + retval));
            ret_reg = "v1";
        }
        // Put ret val in v0
        System.out.println("\tMOVE v0 " + ret_reg);
        // restore callee regs
        restoreCalleeRegs();
        // Clear stack since frame has been used
        stack_ptr = 0;
        System.out.println("END"); // miniRA doesn't have BEGINs, only ENDs

        return _ret;
    }

    /**
     * f0 -> "CALL" f1 -> SimpleExp() f2 -> "(" f3 -> ( Temp() )* f4 -> ")"
     */
    public R visit(Call n) {
        R _ret = null;
        label_print = false;
        String expval = (String) n.f1.accept(this); // temp or label
        String call_reg = expval;
        if (n.f1.f0.which == 0) { // it's a temp
            call_reg = symtab.register.get(currfunc + call_reg);
        }
        if (call_reg == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + expval));
            call_reg = "v1";
        }

        // Handle params
        Vector<Node> nodes = n.f3.nodes;
        int argno = 0; // a0 to a3 are the arg regs
        for (Node node : nodes) {
            String tempval = (String) node.accept(this);
            String reg = symtab.register.get(currfunc + tempval);
            if (reg == null) {
                System.out.println("\tALOAD v1 SPILLEDARG "
                        + symtab.location.get(currfunc + tempval));
                reg = "v1";
            }
            if (argno < 4) {
                System.out.println("\tMOVE a" + argno + " " + reg);
            }
            else {
                System.out.println("\tPASSARG " + (argno - 3) + " " + reg);
                // TODO: the arg2 and arg3 of the method, load/store spilled
                // args at locations in the unused stack region
            }
            argno++;
        }

        // save caller regs before making the call
        saveCallerRegs();
        System.out.println("\tCALL " + call_reg);
        // restore caller regs after call gets done
        restoreCallerRegs();

        // Return value stored in v0
        return (R) "v0";
    }

    /**
     * f0 -> "HALLOCATE" f1 -> SimpleExp()
     */
    public R visit(HAllocate n) {
        String expval = (String) n.f1.accept(this); // temp or int literal
        String arg_reg = expval;
        if (n.f1.f0.which == 0) { // it's a temp
            arg_reg = symtab.register.get(currfunc + expval);
        }
        if (arg_reg == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + expval));
            arg_reg = "v1";
        }
        System.out.println("\tMOVE v0 HALLOCATE " + arg_reg);
        return (R) "v0";
    }

    /**
     * f0 -> Operator() f1 -> Temp() f2 -> SimpleExp()
     */
    public R visit(BinOp n) {
        String tempval = (String) n.f1.accept(this);
        String arg_reg1 = symtab.register.get(currfunc + tempval);
        String expval = (String) n.f2.accept(this); // temp or int literal
        String arg_reg2 = expval;
        if (n.f2.f0.which == 0) { // it's a temp
            arg_reg2 = symtab.register.get(currfunc + expval);
        }
        // Check if they have valid regs assigned
        if (arg_reg1 == null) {
            System.out.println("\tALOAD v0 SPILLEDARG "
                    + symtab.location.get(currfunc + tempval));
            arg_reg1 = "v0";
        }
        if (arg_reg2 == null) {
            System.out.println("\tALOAD v1 SPILLEDARG "
                    + symtab.location.get(currfunc + expval));
            arg_reg2 = "v1";
        }
        System.out.println("\tMOVE v0 " + n.f0.accept(this) + " " + arg_reg1
                + " " + arg_reg2);
        return (R) "v0";
    }

    /**
     * f0 -> "LT" | "PLUS" | "MINUS" | "TIMES"
     */
    public R visit(Operator n) {
        return (R) n.f0.choice.toString();
    }

    /**
     * f0 -> Temp() | IntegerLiteral() | Label()
     */
    public R visit(SimpleExp n) {
        return n.f0.accept(this);
    }

    /**
     * f0 -> "TEMP" f1 -> IntegerLiteral()
     */
    public R visit(Temp n) {
        return n.f1.accept(this);
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        return (R) n.f0.toString();
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n) {
        if (label_print) {
            String alt_label = symtab.global_label.get(currfunc
                    + n.f0.toString());
            System.out.println(alt_label);
        }
        label_print = true;
        return (R) n.f0.toString();
    }

}
