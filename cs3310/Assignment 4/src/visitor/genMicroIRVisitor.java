//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class genMicroIRVisitor<R> implements GJNoArguVisitor<R> {
    int     tabspace    = 0;
    Integer temp_count  = 500;
    boolean func        = false;
    boolean label_print = true; // Flag to mark if a label is to be printed

    void printTab() {
        for (int i = 0; i < tabspace; i++) {
            System.out.print("\t");
        }
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public R visit(NodeList n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if (n.present()) {
            R _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                label_print = true;
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n) {
        if (n.present())
            return n.node.accept(this);
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN" f1 -> StmtList() f2 -> "END" f3 -> ( Procedure() )* f4 ->
     * <EOF>
     */
    public R visit(Goal n) {
        R _ret = null;

        System.out.println("MAIN");
        tabspace++;
        n.f1.accept(this);
        tabspace--;
        System.out.println("END");

        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Label() f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> StmtExp()
     */
    public R visit(Procedure n) {
        R _ret = null;
        label_print = false;

        System.out.println();
        System.out.print(n.f0.accept(this) + " [" + n.f2.accept(this) + "]");

        func = true;
        n.f4.accept(this);
        System.out.println();

        return _ret;
    }

    /**
     * f0 -> NoOpStmt() | ErrorStmt() | CJumpStmt() | JumpStmt() | HStoreStmt()
     * | HLoadStmt() | MoveStmt() | PrintStmt()
     */
    public R visit(Stmt n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n) {
        R _ret = null;

        printTab();
        System.out.println("NOOP");

        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n) {
        R _ret = null;

        printTab();
        System.out.println("ERROR");

        return _ret;
    }

    /**
     * f0 -> "CJUMP" f1 -> Exp() f2 -> Label()
     */
    public R visit(CJumpStmt n) {
        R _ret = null;
        label_print = false;

        String exp_temp = (String) n.f1.accept(this);

        String new_exp_temp = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.println("MOVE " + new_exp_temp + " " + exp_temp);

        label_print = false;

        printTab();
        System.out.println("CJUMP " + new_exp_temp + " " + n.f2.accept(this));

        return _ret;
    }

    /**
     * f0 -> "JUMP" f1 -> Label()
     */
    public R visit(JumpStmt n) {
        R _ret = null;
        label_print = false;

        printTab();
        System.out.println("JUMP " + n.f1.accept(this));

        return _ret;
    }

    /**
     * f0 -> "HSTORE" f1 -> Exp() f2 -> IntegerLiteral() f3 -> Exp()
     */
    public R visit(HStoreStmt n) {
        R _ret = null;
        label_print = false;

        String exp_temp = (String) n.f1.accept(this);
        String exp_temp2 = (String) n.f3.accept(this);

        String new_exp_temp = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.println("MOVE " + new_exp_temp + " " + exp_temp);

        String new_exp_temp2 = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.println("MOVE " + new_exp_temp2 + " " + exp_temp2);

        printTab();
        System.out.println("HSTORE " + new_exp_temp + " " + n.f2.accept(this)
                + " " + new_exp_temp2);

        return _ret;
    }

    /**
     * f0 -> "HLOAD" f1 -> Temp() f2 -> Exp() f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n) {
        R _ret = null;

        String exp_temp = (String) n.f2.accept(this);
        
        String new_exp_temp = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.println("MOVE " + new_exp_temp + " " + exp_temp);

        printTab();
        System.out.println("HLOAD " + n.f1.accept(this) + " " + new_exp_temp + " "
                + n.f3.accept(this));

        return _ret;
    }

    /**
     * f0 -> "MOVE" f1 -> Temp() f2 -> Exp()
     */
    public R visit(MoveStmt n) {
        R _ret = null;
        String exp_temp = (String) n.f2.accept(this);
        printTab();
        System.out.println("MOVE " + n.f1.accept(this) + " " + exp_temp);

        return _ret;
    }

    /**
     * f0 -> "PRINT" f1 -> Exp()
     */
    public R visit(PrintStmt n) {
        R _ret = null;

        String exp_temp = (String) n.f1.accept(this);

        printTab();
        System.out.println("PRINT " + exp_temp);

        return _ret;
    }

    /**
     * f0 -> StmtExp() | Call() | HAllocate() | BinOp() | Temp() |
     * IntegerLiteral() | Label()
     */
    public R visit(Exp n) {
        return n.f0.accept(this);
    }

    /**
     * f0 -> "BEGIN" f1 -> StmtList() f2 -> "RETURN" f3 -> Exp() f4 -> "END"
     */
    public R visit(StmtExp n) {
        R _ret = null;

        boolean in_func = func;
        // Set func to false here because it needs to reflect globally before
        // entering StmtList and Exp
        func = false;

        if (in_func) {
            System.out.println();
            printTab();
            System.out.println("BEGIN");
            tabspace++;
        }

        n.f1.accept(this);
        String exp_temp = (String) n.f3.accept(this);

        if (in_func) {
            printTab();
            System.out.println("RETURN " + exp_temp);
            tabspace--;
            printTab();
            System.out.print("END ");
        }

        return (R) exp_temp;
    }

    /**
     * f0 -> "CALL" f1 -> Exp() f2 -> "(" f3 -> ( Exp() )* f4 -> ")"
     */
    public R visit(Call n) { // not done
        R _ret = null;
        label_print = false;

        String exp_temp = (String) n.f1.accept(this);

        LinkedList<String> param_queue = new LinkedList<String>();
        Vector<Node> nodes = n.f3.nodes;
        for (Node node : nodes) {
            String param_temp = "TEMP " + temp_count.toString();
            temp_count++;
            String eval_temp = (String) node.accept(this);
            printTab();
            System.out.println("MOVE " + param_temp + " " + eval_temp);
            param_queue.add(param_temp);
        }

        String ret_temp = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.print("MOVE " + ret_temp + " CALL " + exp_temp + " (");
        for (String param_temp : param_queue) {
            System.out.print(" " + param_temp);
        }
        System.out.println(" )");
        param_queue.clear();

        return (R) ret_temp;
    }

    /**
     * f0 -> "HALLOCATE" f1 -> Exp()
     */
    public R visit(HAllocate n) {
        R _ret = null;

        String exp_temp = (String) n.f1.accept(this);

        String ret_temp = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.println("MOVE " + ret_temp + " HALLOCATE " + exp_temp);

        return (R) ret_temp;
    }

    /**
     * f0 -> Operator() f1 -> Exp() f2 -> Exp()
     */
    public R visit(BinOp n) {
        R _ret = null;

        String exp_temp = (String) n.f1.accept(this);
        String exp_temp2 = (String) n.f2.accept(this);

        String new_exp_temp = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.println("MOVE " + new_exp_temp + " " + exp_temp);

        String ret_temp = "TEMP " + temp_count.toString();
        temp_count++;
        printTab();
        System.out.println("MOVE " + ret_temp + " " + n.f0.accept(this) + " "
                + new_exp_temp + " " + exp_temp2);
        return (R) ret_temp;
    }

    /**
     * f0 -> "LT" | "PLUS" | "MINUS" | "TIMES"
     */
    public R visit(Operator n) {
        R _ret = null;
        return (R) n.f0.choice.toString();
    }

    /**
     * f0 -> "TEMP" f1 -> IntegerLiteral()
     */
    public R visit(Temp n) {
        String ret = "TEMP " + n.f1.accept(this);
        return (R) ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        return (R) n.f0.toString();
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n) {
        R _ret = null;
        if (label_print) {
            System.out.println(n.f0.toString());
        }
        label_print = true;
        return (R) n.f0.toString();
    }

}
