//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

import base.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class genMiniIRVisitor<R> implements GJNoArguVisitor<R> {

    public SymbolTable        symtab;
    String                    classname, methname;
    String                    called_classname, called_methname;
    ClassDef                  curr_class, called_curr_class;
    MethodDef                 curr_method, called_curr_method;
    int                       temp_count     = 0;
    int                       label_count    = 0;
    Stack<LinkedList<String>> param_stack    = new Stack<LinkedList<String>>();
    int                       tabspace       = 1;
    ArrayList<String>         child_funclist = new ArrayList<String>();

    void printError(String error) {
        System.out.println("purr");
    }

    // Helper functions
    // Pretty print
    void printTab() {
        for (int i = 0; i < tabspace; i++) {
            System.out.print("\t");
        }
    }

    // Class constructor function
    void printConstructor() {
        System.out.println("Create_" + classname + " [0]");
        System.out.println("BEGIN");

        int temp_count = 0;
        int methodtable_no = temp_count;
        temp_count++;
        printMethodTable(methodtable_no);

        int alloc_size = 4 * (curr_class.vars.size() + 1);
        int classtable_no = temp_count;
        temp_count++;
        System.out.println("\tMOVE TEMP " + classtable_no + " HALLOCATE "
                + alloc_size);
        // Method Table
        System.out.println("\tHSTORE TEMP " + classtable_no + " 0 TEMP "
                + methodtable_no);

        // Variables
        System.out.println();
        printVarTable(classtable_no, temp_count);

        System.out.println("\tRETURN TEMP " + classtable_no);

        System.out.println("END");
    }

    // Class constructor helper - generate the method table
    void printMethodTable(int methodtable_no) {
        int methodtable_size = 4 * (curr_class.methods.size());
        System.out.println("\tMOVE TEMP " + methodtable_no + " HALLOCATE "
                + methodtable_size);

        Iterator<String> it = curr_class.methods.keySet().iterator();
        int i = 0;
        while (it.hasNext()) {
            String key = it.next();
            System.out.println("\tHSTORE TEMP " + methodtable_no + " " + i
                    + " " + classname + "_" + key);
            i += 4;
        }
        System.out.println();
    }

    // Class constructor helper - load variable list
    void printVarTable(int classtable_no, int temp_count) {
        Iterator<String> it = curr_class.vars.keySet().iterator();
        int i = 4;
        while (it.hasNext()) {
            String key = it.next();
            System.out.println("\tMOVE TEMP " + temp_count + " HALLOCATE 4");
            System.out.println("\tMOVE TEMP " + temp_count + " 0");
            System.out.println("\tHSTORE TEMP " + classtable_no + " " + i
                    + " TEMP " + temp_count);
            i += 4;
            temp_count++;
        }
        if (curr_class.vars.size() != 0) {
            System.out.println();
        }
    }

    // Add methods not overridden by child
    void addMethods() {

        Iterator<String> it = curr_class.methods.keySet().iterator();
        while (it.hasNext()) {
            String key = it.next();
            if (!child_funclist.contains(key)) {
                String parent_class_name = curr_class.parent;
                ClassDef parent_class = symtab.classes.get(parent_class_name);
                visit(parent_class.methods.get(key).meth_dec);
            }
        }
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public R visit(NodeList n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if (n.present()) {
            R _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n) {
        if (n.present())
            return n.node.accept(this);
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass() f1 -> ( TypeDeclaration() )* f2 -> <EOF>
     */
    public R visit(Goal n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static"
     * f5 -> "void" f6 -> "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]"
     * f11 -> Identifier() f12 -> ")" f13 -> "{" f14 -> PrintStatement() f15 ->
     * "}" f16 -> "}"
     */
    public R visit(MainClass n) {
        R _ret = null;
        classname = n.f1.f0.toString();
        curr_class = symtab.classes.get(classname);
        methname = n.f6.toString();
        curr_method = curr_class.methods.get(methname);

        System.out.println("MAIN");
        n.f14.accept(this);
        System.out.println("END");
        System.out.println();

        return _ret;
    }

    /**
     * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( VarDeclaration() )* f4
     * -> ( MethodDeclaration() )* f5 -> "}"
     */
    public R visit(ClassDeclaration n) {
        R _ret = null;
        classname = n.f1.f0.toString();
        curr_class = symtab.classes.get(classname);
        methname = null;

        printConstructor();
        System.out.println();

        n.f4.accept(this);

        // Clear out the list - unwanted
        child_funclist.clear();

        return _ret;
    }

    /**
     * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> Identifier() f4 ->
     * "{" f5 -> ( VarDeclaration() )* f6 -> ( MethodDeclaration() )* f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n) {
        R _ret = null;
        classname = (String) n.f1.f0.toString();
        curr_class = symtab.classes.get(classname);
        methname = null;

        printConstructor();
        System.out.println();

        n.f6.accept(this);

        // Add methods not overridden by child
        addMethods();

        // Clear out the list - done using it
        child_funclist.clear();

        return _ret;
    }

    /**
     * f0 -> Type() f1 -> Identifier() f2 -> ";"
     */
    public R visit(VarDeclaration n) {
        R _ret = null;

        int id_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("MOVE TEMP " + id_temp + " 0");

        return _ret;
    }

    /**
     * f0 -> "public" f1 -> Type() f2 -> Identifier() f3 -> "(" f4 -> (
     * FormalParameterList() )? f5 -> ")" f6 -> "{" f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )* f9 -> "return" f10 -> Expression() f11 -> ";" f12
     * -> "}"
     */
    public R visit(MethodDeclaration n) {
        R _ret = null;

        methname = n.f2.f0.toString();
        curr_method = curr_class.methods.get(methname);

        // Book keeping
        child_funclist.add(methname);

        int param_no = curr_method.params.size() + 1;

        System.out.println(classname + "_" + methname + " [" + param_no + "]");
        System.out.println("BEGIN");

        temp_count = param_no + curr_method.locals.size();

        // n.f7.accept(this);
        // System.out.println();

        n.f8.accept(this);

        int ret_temp = temp_count;
        temp_count++;
        System.out.print("\tMOVE TEMP " + ret_temp + " ");
        n.f10.accept(this);
        System.out.println();

        System.out.println("\tRETURN TEMP " + ret_temp);

        System.out.println("END");
        System.out.println();

        return _ret;
    }

    /**
     * f0 -> FormalParameter() f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Type() f1 -> Identifier()
     */
    public R visit(FormalParameter n) {
        R _ret = null;
        return _ret;
    }

    /**
     * f0 -> "," f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n) {
        R _ret = null;
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> ArrayType() | BooleanType() | IntegerType() | Identifier()
     */
    public R visit(Type n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "int" f1 -> "[" f2 -> "]"
     */
    public R visit(ArrayType n) {
        R _ret = null;
        return (R) "int[]";
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n) {
        R _ret = null;
        return (R) "boolean";
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n) {
        R _ret = null;
        return (R) "int";
    }

    /**
     * f0 -> Block() | AssignmentStatement() | ArrayAssignmentStatement() |
     * IfStatement() | WhileStatement() | PrintStatement()
     */
    public R visit(Statement n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "{" f1 -> ( Statement() )* f2 -> "}"
     */
    public R visit(Block n) {
        R _ret = null;
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier() f1 -> "=" f2 -> Expression() f3 -> ";"
     */
    public R visit(AssignmentStatement n) {
        R _ret = null;
        boolean class_attr = false;

        String identname = n.f0.f0.toString();

        int param_no = curr_method.params.size();
        int id_temp = param_no + 1;

        if (curr_method.locals.containsKey(identname)) {
            Iterator<String> it = curr_method.locals.keySet().iterator();
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(identname)) {
                    break;
                }
                id_temp++;
            }
        }
        else if (curr_method.params.containsKey(identname)) {
            Iterator<String> it = curr_method.params.keySet().iterator();
            id_temp = 1;
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(identname)) {
                    break;
                }
                id_temp++;
            }
        }
        else if (curr_class.vars.containsKey(identname)) {
            Iterator<String> it = curr_class.vars.keySet().iterator();
            id_temp = 4;
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(identname)) {
                    break;
                }
                id_temp += 4;
            }
            class_attr = true;
        }

        int exp_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("MOVE TEMP " + exp_temp + " ");
        n.f2.accept(this);
        System.out.println();

        if (class_attr) {
            printTab();
            System.out
                    .println("HSTORE TEMP 0 " + id_temp + " TEMP " + exp_temp);
        }
        else {
            printTab();
            System.out.println("MOVE TEMP " + id_temp + " TEMP " + exp_temp);
        }

        return _ret;
    }

    /**
     * f0 -> Identifier() f1 -> "[" f2 -> Expression() f3 -> "]" f4 -> "=" f5 ->
     * Expression() f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n) {
        R _ret = null;
        boolean class_attr = false;

        String identname = n.f0.f0.toString();

        int param_no = curr_method.params.size();
        int id_temp = param_no + 1;

        if (curr_method.locals.containsKey(identname)) {
            Iterator<String> it = curr_method.locals.keySet().iterator();
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(identname)) {
                    break;
                }
                id_temp++;
            }
        }
        else if (curr_method.params.containsKey(identname)) {
            Iterator<String> it = curr_method.params.keySet().iterator();
            id_temp = 1;
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(identname)) {
                    break;
                }
                id_temp++;
            }
        }
        else if (curr_class.vars.containsKey(identname)) {
            Iterator<String> it = curr_class.vars.keySet().iterator();
            id_temp = 4;
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(identname)) {
                    break;
                }
                id_temp += 4;
            }
            class_attr = true;
        }

        int exp_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("MOVE TEMP " + exp_temp + " PLUS 1 ");
        n.f2.accept(this);
        System.out.println();

        int eval_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("MOVE TEMP " + eval_temp + " ");
        n.f5.accept(this);
        System.out.println();

        int offset_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("MOVE TEMP " + offset_temp);
        System.out.println(" TIMES 4 TEMP " + exp_temp);

        if (class_attr) {
            int array_temp = temp_count;
            temp_count++;

            printTab();
            System.out.println("HLOAD TEMP " + array_temp + " TEMP 0 "
                    + id_temp);

            int loc_temp = temp_count;
            temp_count++;
            printTab();
            System.out.print("MOVE TEMP " + loc_temp);
            System.out.println(" PLUS TEMP " + array_temp + " TEMP "
                    + offset_temp);

            printTab();
            System.out.println("HSTORE TEMP " + loc_temp + " 0 TEMP "
                    + eval_temp);

            printTab();
            System.out.println("HSTORE TEMP 0 " + id_temp + " TEMP "
                    + array_temp);
        }
        else {
            int loc_temp = temp_count;
            temp_count++;
            printTab();
            System.out.print("MOVE TEMP " + loc_temp);
            System.out
                    .println(" PLUS TEMP " + id_temp + " TEMP " + offset_temp);

            printTab();
            System.out.println("HSTORE TEMP " + loc_temp + " 0 TEMP "
                    + eval_temp);
        }

        return _ret;
    }

    /**
     * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 ->
     * "else" f6 -> Statement()
     */
    public R visit(IfStatement n) {
        R _ret = null;

        printTab();
        System.out.print("CJUMP ");
        n.f2.accept(this);

        int else_label = label_count;
        label_count++;
        System.out.println(" L" + else_label);

        // if portion
        n.f4.accept(this);
        int jumpelse_label = label_count;
        label_count++;
        printTab();
        System.out.println("JUMP L" + jumpelse_label);

        System.out.println("L" + else_label);
        // else portion
        n.f6.accept(this);

        // Line if must jump to
        System.out.println("L" + jumpelse_label);
        printTab();
        System.out.println("NOOP");

        return _ret;
    }

    /**
     * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
     */
    public R visit(WhileStatement n) {
        R _ret = null;
        int while_label = label_count;
        label_count++;
        System.out.println("L" + while_label);

        // Test while condition
        printTab();
        System.out.print("CJUMP ");
        n.f2.accept(this);
        int break_label = label_count;
        label_count++;
        System.out.println(" L" + break_label);

        // while body
        n.f4.accept(this);

        // Loop back to test condition
        printTab();
        System.out.println("JUMP L" + while_label);
        System.out.println();

        // Line to jump to when while breaks
        System.out.println("L" + break_label);
        printTab();
        System.out.println("NOOP");

        return _ret;
    }

    /**
     * f0 -> "System.out.println" f1 -> "(" f2 -> Expression() f3 -> ")" f4 ->
     * ";"
     */
    public R visit(PrintStatement n) {
        R _ret = null;
        int print_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("MOVE TEMP " + print_temp + " ");
        n.f2.accept(this);
        System.out.println();

        printTab();
        System.out.println("PRINT TEMP " + print_temp);
        return _ret;
    }

    /**
     * f0 -> AndExpression() | CompareExpression() | PlusExpression() |
     * MinusExpression() | TimesExpression() | ArrayLookup() | ArrayLength() |
     * MessageSend() | PrimaryExpression()
     */
    public R visit(Expression n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression() f1 -> "&" f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n) {
        R _ret = null;

        printTab();
        System.out.println("BEGIN");

        // Initialise bool to false
        int bool_temp = label_count;
        printTab();
        System.out.println("\tMOVE TEMP " + bool_temp + " 0");
        // test PE1
        printTab();
        System.out.print("\tCJUMP ");
        n.f0.accept(this);
        int false_label = label_count;
        label_count++;
        System.out.println(" L" + false_label);

        // test PE2 if PE1 is true
        printTab();
        System.out.print("\tCJUMP ");
        n.f2.accept(this);
        System.out.println(" L" + false_label);

        // set bool to true
        System.out.println("MOVE TEMP " + bool_temp + " 1");

        // return bool
        System.out.println();
        System.out.println("L" + false_label);
        printTab();
        System.out.println("\tNOOP");
        printTab();
        System.out.println("\tRETURN TEMP " + bool_temp);
        printTab();
        System.out.println("END");

        return _ret;
    }

/**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
    public R visit(CompareExpression n) {
        R _ret = null;

        System.out.print("LT ");
        n.f0.accept(this);
        System.out.print(" ");
        n.f2.accept(this);

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression() f1 -> "+" f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n) {
        R _ret = null;

        System.out.print("PLUS ");
        n.f0.accept(this);
        System.out.print(" ");
        n.f2.accept(this);

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression() f1 -> "-" f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n) {
        R _ret = null;

        System.out.print("MINUS ");
        n.f0.accept(this);
        System.out.print(" ");
        n.f2.accept(this);
        System.out.println();

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression() f1 -> "*" f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n) {
        R _ret = null;

        System.out.print("TIMES ");
        n.f0.accept(this);
        System.out.print(" ");
        n.f2.accept(this);

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression() f1 -> "[" f2 -> PrimaryExpression() f3 -> "]"
     */
    public R visit(ArrayLookup n) {
        R _ret = null;

        System.out.println();

        printTab();
        System.out.println("BEGIN");

        int array_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tMOVE TEMP " + array_temp + " ");
        tabspace++;
        n.f0.accept(this);
        tabspace--;
        System.out.println();

        int index_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tMOVE TEMP " + index_temp + " PLUS 1 ");
        tabspace++;
        n.f2.accept(this);
        tabspace--;
        System.out.println();

        int offset_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tMOVE TEMP " + offset_temp);
        System.out.println(" TIMES 4 TEMP " + index_temp);

        int loc_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tMOVE TEMP " + loc_temp);
        System.out.println(" PLUS TEMP " + array_temp + " TEMP " + offset_temp);

        int ret_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tHLOAD TEMP " + ret_temp + " TEMP " + loc_temp
                + " 0");
        printTab();
        System.out.println("\tRETURN TEMP " + ret_temp);
        printTab();
        System.out.println("END");

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression() f1 -> "." f2 -> "length"
     */
    public R visit(ArrayLength n) {
        R _ret = null;

        System.out.println();

        printTab();
        System.out.println("BEGIN");

        int exp_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tMOVE TEMP " + exp_temp + " ");
        tabspace++;
        n.f0.accept(this);
        System.out.println();
        tabspace--;

        int ret_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tHLOAD TEMP " + ret_temp + " TEMP " + exp_temp
                + " 0");

        printTab();
        System.out.println("\tRETURN TEMP " + ret_temp);
        printTab();
        System.out.println("END");

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression() f1 -> "." f2 -> Identifier() f3 -> "(" f4 -> (
     * ExpressionList() )? f5 -> ")"
     */
    public R visit(MessageSend n) {
        R _ret = null;

        System.out.println();
        printTab();
        System.out.println("BEGIN");
        int obj_temp = temp_count;
        temp_count++;

        // First param to pass
        printTab();
        System.out.print("\tMOVE TEMP " + obj_temp + " ");
        tabspace++;
        n.f0.accept(this);
        tabspace--;
        System.out.println();

        // Handle this pointer
        called_classname = classname;

        if (n.f0.f0.which == 3) { // 3 => Identifier, 4 => ThisExpression,
            // 6=>AllocationExpression
            String objname = ((Identifier) n.f0.f0.choice).f0.toString();
            if (curr_method.locals.containsKey(objname)) {
                called_classname = curr_method.locals.get(objname);
            }
            else if (curr_method.params.containsKey(objname)) {
                called_classname = curr_method.params.get(objname);
            }
            else {
                called_classname = curr_class.vars.get(objname);
            }
        }
        else if (n.f0.f0.which == 6) {
            called_classname = ((AllocationExpression) n.f0.f0.choice).f1.f0
                    .toString();
        }

        called_curr_class = symtab.classes.get(called_classname);
        called_methname = n.f2.f0.toString();

        // Find function
        int funtable_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tHLOAD TEMP " + funtable_temp + " TEMP "
                + obj_temp + " 0");
        int fun_temp = temp_count;
        temp_count++;

        Iterator<String> it = called_curr_class.methods.keySet().iterator();
        int offset = 0;
        while (it.hasNext()) {
            String key = it.next();
            if (key.equals(called_methname)) {
                break;
            }
            offset += 4;
        }
        printTab();
        System.out.println("\tHLOAD TEMP " + fun_temp + " TEMP "
                + funtable_temp + " " + offset);
        // eval explist - build param queue
        LinkedList<String> param_queue = new LinkedList<String>();
        param_stack.push(param_queue);
        n.f4.accept(this);

        // call function
        System.out.println();
        printTab();
        System.out.print("\tRETURN CALL TEMP " + fun_temp);

        // params
        System.out.print("( TEMP " + obj_temp + " ");

        param_queue = param_stack.pop();
        ListIterator<String> itr = param_queue.listIterator();
        while (itr.hasNext()) {
            String param = (String) itr.next();
            System.out.print(param + " ");
            itr.remove();
        }
        System.out.println(")");
        printTab();
        System.out.print("END");

        return _ret;
    }

    /**
     * f0 -> Expression() f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n) {
        R _ret = null;

        int param_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tMOVE TEMP " + param_temp + " ");
        n.f0.accept(this);

        param_stack.peek().add("TEMP " + param_temp);

        n.f1.accept(this);

        return _ret;
    }

    /**
     * f0 -> "," f1 -> Expression()
     */
    public R visit(ExpressionRest n) {
        R _ret = null;

        int param_temp = temp_count;
        temp_count++;
        System.out.println();
        printTab();
        System.out.print("\tMOVE TEMP " + param_temp + " ");
        n.f1.accept(this);

        param_stack.peek().add("TEMP " + param_temp);

        return _ret;
    }

    /**
     * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() |
     * ThisExpression() | ArrayAllocationExpression() | AllocationExpression() |
     * NotExpression() | BracketExpression()
     */
    public R visit(PrimaryExpression n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        R _ret = null;
        System.out.print(n.f0.tokenImage);
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n) {
        R _ret = null;
        System.out.print("1");
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n) {
        R _ret = null;
        System.out.print("0");
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n) {
        R _ret = null;

        if (curr_method.locals.containsKey(n.f0.toString())) {
            Iterator<String> it = curr_method.locals.keySet().iterator();
            int i = curr_method.params.size() + 1;
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(n.f0.toString())) {
                    break;
                }
                i++;
            }
            System.out.print("TEMP " + i);
        }
        else if (curr_method.params.containsKey(n.f0.toString())) {
            Iterator<String> it = curr_method.params.keySet().iterator();
            int i = 1;
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(n.f0.toString())) {
                    break;
                }
                i++;
            }
            System.out.print("TEMP " + i);
        }
        else if (curr_class.vars.containsKey(n.f0.toString())) {
            Iterator<String> it = curr_class.vars.keySet().iterator();
            int offset = 4;
            while (it.hasNext()) {
                String key = it.next();
                if (key.equals(n.f0.toString())) {
                    break;
                }
                offset += 4;
            }
            System.out.println();

            printTab();
            System.out.println("BEGIN");
            int ret_temp = temp_count;
            temp_count++;
            printTab();
            System.out
                    .println("\tHLOAD TEMP " + ret_temp + " TEMP 0 " + offset);
            printTab();
            System.out.println("\tRETURN TEMP " + ret_temp);
            printTab();
            System.out.print("END");
        }
        /*
         * else if (symtab.classes.containsKey(n.f0.toString())) { return (R)
         * n.f0.toString(); // It's a class name }
         */

        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n) {
        R _ret = null;
        System.out.print("TEMP 0");
        return _ret;
    }

    /**
     * f0 -> "new" f1 -> "int" f2 -> "[" f3 -> Expression() f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n) {
        R _ret = null;

        System.out.println();
        printTab();
        System.out.println("BEGIN");
        int exp_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tMOVE TEMP " + exp_temp + " ");
        n.f3.accept(this);
        System.out.println();

        int array_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tMOVE TEMP " + array_temp
                + " HALLOCATE TIMES 4 PLUS 1 TEMP " + exp_temp);

        // Store length
        printTab();
        System.out.println("\tHSTORE TEMP " + array_temp + " 0 TEMP "
                + exp_temp);

        // Init to zero
        int i_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tMOVE TEMP " + i_temp + " 0");
        int init_label = label_count;
        label_count++;
        System.out.println("L" + init_label);
        int initdone_label = label_count;
        printTab();
        System.out.println("\tCJUMP LT TEMP " + i_temp + " TEMP " + exp_temp
                + " L" + initdone_label);
        int id_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tMOVE TEMP " + id_temp + " PLUS 1 TEMP " + i_temp);
        int offset_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tMOVE TEMP " + offset_temp + " TIMES 4 TEMP "
                + id_temp);
        int loc_temp = temp_count;
        temp_count++;
        printTab();
        System.out.println("\tMOVE TEMP " + loc_temp + " PLUS TEMP "
                + array_temp + " TEMP " + offset_temp);
        printTab();
        System.out.println("\tHSTORE TEMP " + loc_temp + " 0 0");
        printTab();
        System.out.println("\tMOVE TEMP " + i_temp + " PLUS TEMP " + i_temp
                + " 1");
        printTab();
        System.out.println("\tJUMP L" + init_label);
        System.out.println("L" + initdone_label);
        printTab();
        System.out.println("\tNOOP");

        printTab();
        System.out.println("\tRETURN TEMP " + array_temp);
        printTab();
        System.out.print("END");

        return _ret;
    }

    /**
     * f0 -> "new" f1 -> Identifier() f2 -> "(" f3 -> ")"
     */
    public R visit(AllocationExpression n) {
        R _ret = null;

        System.out.println();
        printTab();
        System.out.println("BEGIN");
        printTab();
        System.out.println("\tRETURN CALL Create_" + n.f1.f0.toString() + "()");
        printTab();
        System.out.print("END");

        return _ret;
    }

    /**
     * f0 -> "!" f1 -> Expression()
     */
    public R visit(NotExpression n) {
        R _ret = null;

        printTab();
        System.out.println("BEGIN");
        int not_temp = temp_count;
        temp_count++;
        printTab();
        System.out.print("\tRETURN MINUS 1 ");
        n.f1.accept(this);
        printTab();
        System.out.print("END");

        return _ret;
    }

    /**
     * f0 -> "(" f1 -> Expression() f2 -> ")"
     */
    public R visit(BracketExpression n) {
        R _ret = null;

        System.out.println();
        printTab();
        System.out.println("BEGIN");
        int exp_temp = temp_count;
        temp_count++;

        printTab();
        System.out.print("\tMOVE TEMP " + exp_temp + " ");
        tabspace++;
        n.f1.accept(this);
        tabspace--;
        System.out.println();

        printTab();
        System.out.println("\tRETURN TEMP " + exp_temp);
        printTab();
        System.out.print("END");

        return _ret;
    }

}
