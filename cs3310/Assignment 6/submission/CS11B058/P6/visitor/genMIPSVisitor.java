//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class genMIPSVisitor<R> implements GJNoArguVisitor<R> {
    // Global vars
    int                      arg1                = 0;
    boolean                  label_print         = true;
    String                   binopval            = null;
    int                      astore_baseval      = 0;
    int                      passargs_baseval    = 0;
    int                      passargs_saved_base = 0;
    int                      astore_saved_base   = 0;
    // To take care of cjumps whose labels don't exist.
    HashMap<String, Integer> label_list          = new HashMap<String, Integer>();

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public R visit(NodeList n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if (n.present()) {
            R _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                label_print = true;
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n) {
        if (n.present())
            return n.node.accept(this);
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN" f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> "[" f5 ->
     * IntegerLiteral() f6 -> "]" f7 -> "[" f8 -> IntegerLiteral() f9 -> "]" f10
     * -> StmtList() f11 -> "END" f12 -> ( Procedure() )* f13 ->
     * VariablePackingInfo() f14 -> <EOF>
     */
    public R visit(Goal n) {
        R _ret = null;

        System.out.println("\t.text");
        System.out.println("\t.globl main");
        System.out.println("main:");

        int stksize = Integer.parseInt((String) n.f8.accept(this));
        stksize = Math.max(0, stksize - 4); // arg3
        stksize += Integer.parseInt((String) n.f5.accept(this)); // arg2
        stksize += 1; // for ret add
        stksize *= 4;

        System.out.println("\tmove $fp, $sp");
        System.out.println("\tsubu $sp, $sp, " + stksize);
        System.out.println("\tsw $ra, -4($fp)");
        n.f10.accept(this);
        System.out.println("\tlw $ra, -4($fp)");
        System.out.println("\taddu $sp, $sp, " + stksize);
        System.out.println("\tj $ra");

        n.f12.accept(this);
        n.f13.accept(this);
        n.f14.accept(this);

        System.out.println();
        for (String label : label_list.keySet()) {
            if (label_list.get(label) == 0) {
                // It hasn't been matched and has been spotted at a jump/cjump.
                System.out.println(label + ": nop");
            }
        }
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Label() f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> "[" f5 ->
     * IntegerLiteral() f6 -> "]" f7 -> "[" f8 -> IntegerLiteral() f9 -> "]" f10
     * -> StmtList() f11 -> "END"
     */
    public R visit(Procedure n) {
        R _ret = null;
        label_print = false;

        String fnname = (String) n.f0.accept(this);
        arg1 = Integer.parseInt((String) n.f2.accept(this));
        arg1 = Math.max(0, arg1 - 4);

        int stksize = Integer.parseInt((String) n.f8.accept(this));
        stksize = Math.max(0, stksize - 4); // arg3
        stksize += Integer.parseInt((String) n.f5.accept(this)) + 100; // arg2
        stksize += 2; // for fp store and ret add
        stksize *= 4;
        int temp = stksize - 8;

        System.out.println();
        System.out.println("\t.text");
        System.out.println("\t.globl " + fnname);
        System.out.println(fnname + ":");
        System.out.println("\tsw $fp, -8($sp)");
        System.out.println("\tmove $fp, $sp");
        System.out.println("\tsubu $sp, $sp, " + stksize);
        System.out.println("\tsw $ra, -4($fp)");
        n.f10.accept(this);
        System.out.println("\tlw $ra, -4($fp)");
        System.out.println("\tlw $fp, " + temp + "($sp)");
        System.out.println("\taddu $sp, $sp, " + stksize);
        System.out.println("\tj $ra");

        return _ret;
    }

    /**
     * f0 -> NoOpStmt() | ErrorStmt() | CJumpStmt() | JumpStmt() | HStoreStmt()
     * | HLoadStmt() | MoveStmt() | PrintStmt() | ALoadStmt() | AStoreStmt() |
     * PassArgStmt() | CallStmt()
     */
    public R visit(Stmt n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n) {
        R _ret = null;
        System.out.println("\tnop");
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n) {
        R _ret = null;

        System.out.println("\tli $v0, 4");
        System.out.println("\tla $a0, str_er");
        System.out.println("\tsyscall");

        return _ret;
    }

    /**
     * f0 -> "CJUMP" f1 -> Reg() f2 -> Label()
     */
    public R visit(CJumpStmt n) {
        R _ret = null;
        label_print = false;

        System.out.print("\tbeqz " + n.f1.accept(this) + " ");
        String label = (String) n.f2.accept(this);
        System.out.println(label);
        Integer status = label_list.get(label);
        if (status != null) {
            if (status == 0 || status == -1) {
                // first time the match has been found
                label_list.put(label, 1);
            }
        }
        else {
            // new label
            label_list.put(label, 0);
        }
        return _ret;
    }

    /**
     * f0 -> "JUMP" f1 -> Label()
     */
    public R visit(JumpStmt n) {
        R _ret = null;
        label_print = false;
        String label = (String) n.f1.accept(this);
        System.out.println("\tb " + label);
        Integer status = label_list.get(label);
        if (status != null) {
            if (status == 0 || status == -1) {
                // first time the match has been found
                label_list.put(label, 1);
            }
        }
        else {
            // new label
            label_list.put(label, 0);
        }
        return _ret;
    }

    /**
     * f0 -> "HSTORE" f1 -> Reg() f2 -> IntegerLiteral() f3 -> Reg()
     */
    public R visit(HStoreStmt n) {
        R _ret = null;
        System.out.println("\tsw " + n.f3.accept(this) + ", "
                + n.f2.accept(this) + "(" + n.f1.accept(this) + ")");
        return _ret;
    }

    /**
     * f0 -> "HLOAD" f1 -> Reg() f2 -> Reg() f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n) {
        R _ret = null;
        System.out.println("\tlw " + n.f1.accept(this) + " "
                + n.f3.accept(this) + "(" + n.f2.accept(this) + ")");
        return _ret;
    }

    /**
     * f0 -> "MOVE" f1 -> Reg() f2 -> Exp()
     */
    public R visit(MoveStmt n) {
        R _ret = null;
        label_print = false;

        String regval = (String) n.f1.accept(this);
        String expval = (String) n.f2.accept(this);

        switch (n.f2.f0.which) {
            case 0:
                System.out.println("\tmove " + regval + " $v0");
                break;
            case 1:
                System.out.println("\t" + binopval + " " + regval + ", "
                        + expval);
                break;
            case 2:
                if (((SimpleExp) n.f2.f0.choice).f0.which == 0) {
                    System.out.println("\tmove " + regval + " " + expval);
                }
                else if (((SimpleExp) n.f2.f0.choice).f0.which == 1) {
                    System.out.println("\tli " + regval + " " + expval);
                }
                else {
                    System.out.println("\tla " + regval + " " + expval);
                }
                break;
        }
        return _ret;
    }

    /**
     * f0 -> "PRINT" f1 -> SimpleExp()
     */
    public R visit(PrintStmt n) {
        R _ret = null;
        String expval = (String) n.f1.accept(this);
        if (expval.startsWith("$")) {
            System.out.println("\tmove $a0 " + expval);
        }
        else {
            System.out.println("\tli $a0 " + expval);
        }
        System.out.println("\tjal _print");
        return _ret;
    }

    /**
     * f0 -> "ALOAD" f1 -> Reg() f2 -> SpilledArg()
     */
    public R visit(ALoadStmt n) {
        R _ret = null;
        int spillval = Integer.parseInt((String) n.f2.accept(this));
        if (spillval >= arg1) {
            int temp = spillval * 4 + astore_saved_base;
            System.out.print("\tlw " + n.f1.accept(this) + ", " + temp);
            System.out.println("($sp)");
            passargs_baseval = Math.max(passargs_baseval, temp + 4);
        }
        else {
            int temp = spillval * 4 + passargs_saved_base;
            System.out.print("\tlw " + n.f1.accept(this) + ", " + temp);
            System.out.println("($fp)");
            astore_baseval = Math.max(astore_baseval, temp + 4);
        }
        return _ret;
    }

    /**
     * f0 -> "ASTORE" f1 -> SpilledArg() f2 -> Reg()
     */
    public R visit(AStoreStmt n) {
        R _ret = null;
        int spillval = Integer.parseInt((String) n.f1.accept(this));
        int temp = spillval * 4 + astore_baseval;
        System.out.println("\tsw " + n.f2.accept(this) + ", " + temp + "($sp)");
        passargs_baseval = Math.max(passargs_baseval, temp + 4);
        astore_saved_base = astore_baseval;
        return _ret;
    }

    /**
     * f0 -> "PASSARG" f1 -> IntegerLiteral() f2 -> Reg()
     */
    public R visit(PassArgStmt n) {
        R _ret = null;
        int stkpos = Integer.parseInt((String) n.f1.accept(this));
        int temp = (stkpos - 1) * 4 + passargs_baseval;
        System.out.println("\tsw " + n.f2.accept(this) + ", " + temp + "($sp)");
        astore_baseval = Math.max(astore_baseval, temp + 4);
        passargs_saved_base = passargs_baseval;
        return _ret;
    }

    /**
     * f0 -> "CALL" f1 -> SimpleExp()
     */
    public R visit(CallStmt n) {
        R _ret = null;
        label_print = false;
        System.out.println("\tjalr " + n.f1.accept(this));
        return _ret;
    }

    /**
     * f0 -> HAllocate() | BinOp() | SimpleExp()
     */
    public R visit(Exp n) {
        R _ret = null;
        return n.f0.accept(this);
    }

    /**
     * f0 -> "HALLOCATE" f1 -> SimpleExp()
     */
    public R visit(HAllocate n) {
        R _ret = null;
        String expval = (String) n.f1.accept(this);
        if (expval.startsWith("$")) {
            System.out.println("\tmove $a0 " + expval);
        }
        else {
            System.out.println("\tli $a0 " + expval);
        }
        System.out.println("\tjal _halloc");
        return _ret;
    }

    /**
     * f0 -> Operator() f1 -> Reg() f2 -> SimpleExp()
     */
    public R visit(BinOp n) {
        R _ret = null;
        binopval = (String) n.f0.accept(this);
        String retval = n.f1.accept(this) + ", " + n.f2.accept(this);
        return (R) retval;
    }

    /**
     * f0 -> "LT" | "PLUS" | "MINUS" | "TIMES" | "BITOR" | "BITAND" | "LSHIFT" |
     * "RSHIFT" | "BITXOR"
     */
    public R visit(Operator n) {
        R _ret = null;
        switch (n.f0.which) {
            case 0:
                return (R) "slt";
            case 1:
                return (R) "add";
            case 2:
                return (R) "sub";
            case 3:
                return (R) "mul";
            case 4:
                return (R) "or";
            case 5:
                return (R) "and";
            case 6:
                return (R) "sll";
            case 7:
                return (R) "srl";
            case 8:
                return (R) "xor";
        }
        return _ret;
    }

    /**
     * f0 -> "SPILLEDARG" f1 -> IntegerLiteral()
     */
    public R visit(SpilledArg n) {
        R _ret = null;
        return n.f1.accept(this);
    }

    /**
     * f0 -> Reg() | IntegerLiteral() | Label()
     */
    public R visit(SimpleExp n) {
        label_print = false;
        return n.f0.accept(this);
    }

    /**
     * f0 -> "a0" | "a1" | "a2" | "a3" | "t0" | "t1" | "t2" | "t3" | "t4" | "t5"
     * | "t6" | "t7" | "s0" | "s1" | "s2" | "s3" | "s4" | "s5" | "s6" | "s7" |
     * "t8" | "t9" | "v0" | "v1"
     */
    public R visit(Reg n) {
        R _ret = null;
        String retval = "$" + n.f0.choice.toString();
        return (R) retval;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        R _ret = null;
        return (R) n.f0.toString();
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n) {
        R _ret = null;
        if (label_print) {
            System.out.println(n.f0.toString() + ":");
            String label = n.f0.toString();
            Integer status = label_list.get(label);
            if (status != null) {
                if (status == 0) {
                    // first time the match has been found
                    label_list.put(label, 1);
                }
            }
            else {
                // new label, spotted first not at a jump/cjump.
                label_list.put(label, -1);
            }
        }
        label_print = true;
        return (R) n.f0.toString();
    }

    /**
     * f0 -> "// Number of  vars after packing =" f1 -> IntegerLiteral() f2 ->
     * "; Number of Spilled vars =" f3 -> IntegerLiteral()
     */
    public R visit(VariablePackingInfo n) {
        R _ret = null;
        return _ret;
    }

}

